import{_ as e,c as t,o,k as n}from"./chunks/framework.B9tkazSO.js";const g=JSON.parse('{"title":"Why we stopped using SignalR","description":"","frontmatter":{"title":"Why we stopped using SignalR","date":"2014-10-08T00:00:00.000Z"},"headers":[],"relativePath":"articles/2014-10-08-why-we-stopped-using-signalr.md","filePath":"articles/2014-10-08-why-we-stopped-using-signalr.md"}'),a={name:"articles/2014-10-08-why-we-stopped-using-signalr.md"},i=n("<p>My current development team has been making use of SignalR for communication since I came on board 1 February 2013. However, we have been replacing the communication infrastructure bit-by-bit as we ran into issues.</p><hr><p>A while back we upgraded SignalR to version 2.1.1 and it just didn&#39;t seem to work. We rolled back to version 2.0.3 to get things going again. It then dawned on us that we had removed so much of SignalR that we <em>really</em> did not need it at all. It was then removed after consultation with our product owners and the architecture folks.</p><p>Our main issues:</p><ul><li>we would require a backplane that would slow down communication with our front-end</li><li>we had no control over the <code>JsonSerializer</code> instance that SignalR used internally and some of our messages failed since they had levels that were too deep</li><li>the number of issues on the GitHub repository even though SignalR should be more mature by now</li><li>issues being closed without a resolution</li></ul><p>In case you are wondering: we are now using plain old polling ðŸ˜ƒ</p>",6),s=[i];function r(l,d,c,u,h,p){return o(),t("div",null,s)}const m=e(a,[["render",r]]);export{g as __pageData,m as default};
